---
description: Pipeline for processing STIX 2.1 non-indicator objects
processors:
# Set base event metad
- set:
    field: event.kind
    value: enrichment
- append:
    field: event.category
    value: threat
- set:
    field: event.type
    value: [ indicator ]
- set:
    field: threat.indicator.provider
    value: "luminar"

- date:
    field: foo.modified
    target_field: threat.indicator.last_seen
    formats:
    - ISO8601
    if: ctx.foo.modified != null
    tag: date_modified
- set:
    field: threat.indicator.modified_at
    copy_from: threat.indicator.last_seen
    if: ctx.threat?.indicator?.last_seen != null
    tag: set_threat_indicator_last_seen
- date:
    field: foo.valid_from
    target_field: threat.indicator.first_seen
    formats:
    - "ISO8601"
    if: ctx.foo.valid_from != null
    tag: date_valid_from
- set:
    field: threat.indicator.description
    copy_from: foo.name
    if: ctx.foo?.name != null
# - set:
#     field: threat.indicator.id
#     copy_from: foo.id
#     if: ctx.foo?.id != null

- script:
    lang: painless
    if: ctx.foo.confidence != null
    description: Normalize confidence level
    source: >
      def value = ctx.foo.confidence; if (value == 0) {
        ctx.threat.indicator.confidence = "None";
      } else if (value >= 1 && value <= 29) {
        ctx.threat.indicator.confidence = "Low";
      } else if (value >= 30 && value <= 69) {
        ctx.threat.indicator.confidence = "Medium";
      } else if (value >= 70 && value <= 100) {
        ctx.threat.indicator.confidence = "High";
      } else {
        ctx.threat.indicator.confidence = "Not Specified";
      }

- set:
    field: threat.indicator.types
    copy_from: foo.indicator_types
    if: ctx.foo?.indicator_types != null

## IOC expiration
- date:
    field: foo.valid_until
    target_field: foo.ioc_expiration_date
    formats:
    - ISO8601
    if: ctx.foo.valid_until != null
    tag: date_ioc_expiration_valid_until

- set:
    field: foo.current_time
    value: "{{{_ingest.timestamp}}}"
    tag: set_current_time

- script:
    lang: painless
    tag: script_conf_ioc_expiration
    if: >-
      ctx.foo.ioc_expiration_date == null && ctx._conf?.ioc_expiration_duration != null && ctx._conf.ioc_expiration_duration != ''
    source: >
      ZonedDateTime ioc_expiration_date; ZonedDateTime base_date; def dur = ctx._conf.ioc_expiration_duration;

      if (ctx.foo.valid_from != null) {
        base_date = ZonedDateTime.parse(ctx.foo.valid_from);
      } else if (ctx.foo.created != null) {
        base_date = ZonedDateTime.parse(ctx.foo.created);
      } else {
        base_date = ZonedDateTime.parse(ctx.foo.current_time);
      } if (dur instanceof String){
        String time_unit = dur.substring(dur.length() -  1, dur.length());
        String time_value = dur.substring(0, dur.length() - 1);
        if (time_unit == 'd') {
          ioc_expiration_date = base_date.plusDays(Long.parseLong(time_value));
        } else if (time_unit == 'h') {
          ioc_expiration_date = base_date.plusHours(Long.parseLong(time_value));
        } else if (time_unit == 'm') {
          ioc_expiration_date = base_date.plusMinutes(Long.parseLong(time_value));
        } else {
          if (ctx.error == null) {
            ctx.error = new HashMap();
          }
          if (ctx.error.message == null) {
            ctx.error.message = new ArrayList();
          }
          ctx.error.message.add('invalid ioc_expiration_duration: using default 90 days');
          ioc_expiration_date = base_date.plusDays(90L);
        }
      } else {
          ioc_expiration_date = base_date.plusDays(90L);
      }

      ctx.foo.ioc_expiration_date = ioc_expiration_date;
    on_failure:
    - append:
        field: error.message
        value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'

- script:
    lang: painless
    tag: script_set_ioc_expiration_reason
    if: ctx.foo.ioc_expiration_date != null
    params:
      valid_until: "Expiration set from valid_until field"
      default: "Expiration set by Elastic from the integration's parameter `IOC Expiration Duration`"
    source: >
      if (ctx.foo.valid_until != null) {
        ctx.foo.ioc_expiration_reason = params.valid_until;
      } else {
        ctx.foo.ioc_expiration_reason = params.default;
      }

- date:
    field: foo.ioc_expiration_date
    tag: date_ioc_expiration_date
    target_field: foo.ioc_expiration_date
    formats:
    - ISO8601
    - UNIX
    on_failure:
    - append:
        field: error.message
        value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
    - fail:
        description: 'If this date processor fails, it leads to transform errors, hence failing the document for investigation.'
        message: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed'
- rename:
    field: _conf.ioc_expiration_duration
    tag: rename_conf_ioc_expiration_duration
    target_field: foo.ioc_expiration_duration
    ignore_missing: true
- set:
    field: threat.indicator.type
    value: domain-name
    if: ctx.foo?.pattern != null && ctx.foo.pattern.startsWith('[domain-name')

# Extract specific fields from extensions 
- set:
    field: threat.indicator.score
    copy_from: foo.extension.score
    if: ctx.foo.extension?.score != null
- set:
    field: threat.indicator.as.number
    copy_from: foo.extension.asn
    if: ctx.foo.extension?.asn != null
- set:
    field: related.hosts
    copy_from: foo.extension.resolving_domains
    if: ctx.foo.extension?.resolving_domains != null
- set:
    field: geo.country_iso_code
    copy_from: foo.extension.country
    if: ctx.foo.extension?.country != null

- set:
    field: threat.indicator.type
    value: email-addr
    if: ctx.foo?.pattern != null && ctx.foo.pattern.startsWith('[email')
- set:
    field: threat.indicator.type
    value: file
    if: ctx.foo?.pattern != null && ctx.foo.pattern.startsWith('[file')
- set:
    field: threat.indicator.type
    value: ipv4-addr
    if: ctx.foo?.pattern != null && ctx.foo.pattern.startsWith('[ipv4-addr')
- set:
    field: threat.indicator.type
    value: ipv6-addr
    if: ctx.foo?.pattern != null && ctx.foo.pattern.startsWith('[ipv6-addr')
- set:
    field: threat.indicator.type
    value: url
    if: ctx.foo?.pattern != null && ctx.foo.pattern.startsWith('[url')
- set:
    field: threat.indicator.type
    value: windows-registry-key
    if: ctx.foo?.pattern != null && ctx.foo.pattern.startsWith('[windows-registry-key')
- set:
    field: threat.indicator.type
    value: mutex
    if: ctx.foo?.pattern != null && ctx.foo.pattern.startsWith('[mutex')
- set:
    field: threat.indicator.type
    value: directory
    if: ctx.foo?.pattern != null && ctx.foo.pattern.startsWith('[directory')
- set:
    field: threat.indicator.type
    value: mac-addr
    if: ctx.foo?.pattern != null && ctx.foo.pattern.startsWith('[mac-addr')
- split:
    field: foo.pattern
    target_field: foo._patterns
    separator: '\s+AND\s+|\s+OR\s+'
    if: ctx.threat?.indicator?.type != null && ctx.foo.pattern != null

- foreach:
    field: foo._patterns
    if: ctx.threat?.indicator?.type == 'domain-name'
    ignore_missing: true
    processor:
      pipeline:
        name: '{{ IngestPipeline "indicator-domain-name" }}'

- foreach:
    field: foo._patterns
    if: ctx.threat?.indicator?.type == 'email-addr'
    ignore_missing: true
    processor:
      pipeline:
        name: '{{ IngestPipeline "indicator-email" }}'

- foreach:
    field: foo._patterns
    if: ctx.threat?.indicator?.type == 'file'
    ignore_missing: true
    processor:
      pipeline:
        name: '{{ IngestPipeline "indicator-file" }}'

- foreach:
    field: foo._patterns
    if: ctx.threat?.indicator?.type != null && ctx.threat.indicator.type.startsWith('ip')
    ignore_missing: true
    processor:
      pipeline:
        name: '{{ IngestPipeline "indicator-ip" }}'

- foreach:
    field: foo._patterns
    if: ctx.threat?.indicator?.type == 'url'
    ignore_missing: true
    processor:
      pipeline:
        name: '{{ IngestPipeline "indicator-url" }}'

- foreach:
    field: foo._patterns
    if: ctx.threat?.indicator?.type == 'windows-registry-key'
    ignore_missing: true
    processor:
      pipeline:
        name: '{{ IngestPipeline "indicator-windows-registry" }}'

- foreach:
    field: foo._patterns
    if: ctx.threat?.indicator?.type == 'directory'
    ignore_missing: true
    processor:
      pipeline:
        name: '{{ IngestPipeline "indicator-directory" }}'
- foreach:
    field: foo._patterns
    if: ctx.threat?.indicator?.type == 'mutex'
    ignore_missing: true
    processor:
      pipeline:
        name: '{{ IngestPipeline "indicator-mutex" }}'
- foreach:
    field: foo._patterns
    if: ctx.threat?.indicator?.type == 'mac-addr'
    ignore_missing: true
    processor:
      pipeline:
        name: '{{ IngestPipeline "indicator-mac" }}'

- script:
    lang: painless
    description: Unscape values recursively.
    tag: script_unscape_values
    source: >
      void unescape(Object obj) {
        if (obj instanceof Map) {
          for (entry in ((Map)obj).entrySet()) {
            Object value = entry.getValue();
            unescape(value);
            if (value instanceof String) {
              entry.setValue(((String)value).replace('\\\\', '\\'));
            }
          }
        } else if (obj instanceof List) {
          for (int i = 0; i < ((List)obj).size(); i++) {
            Object value = ((List)obj).get(i);
            unescape(value);
            if (value instanceof String) {
              ((List)obj).set(i, ((String)value).replace('\\\\', '\\'));
            }
          }
        }
      } unescape(ctx);

- script:
    lang: painless
    description: Drops null/empty values recursively.
    tag: drop_null_empty_values
    source: >
      boolean drop(Object o) {
        if (o == null || o == '') {
          return true;
        } else if (o instanceof Map) {
          ((Map) o).values().removeIf(v -> drop(v));
          return (((Map) o).size() == 0);
        } else if (o instanceof List) {
          ((List) o).removeIf(v -> drop(v));
          return (((List) o).length == 0);
        }
        return false;
      } drop(ctx);
- append:
    field: tags
    value: luminar_stix_indicator
    if: ctx.foo?.type == 'indicator'
    allow_duplicates: false
